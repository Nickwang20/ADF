{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-first-dev-nick"
		},
		"ls_AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_AzureBlobStorage1'"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.stackexchange.com/2.3/"
		},
		"ls_AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://KVdatabatch.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_first_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ingest",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_frist_ingest",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"plp_tag": {
									"value": "@pipeline().parameters.mplp_tag",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "transformation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_first_transformation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"plp_tag": {
									"value": "@pipeline().parameters.mplp_tag",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"mplp_tag": {
						"type": "string",
						"defaultValue": "databricks"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-09T18:54:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_frist_ingest')]",
				"[concat(variables('factoryId'), '/pipelines/pl_first_transformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_first_transformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"dsp_folder": {
											"value": "@pipeline().parameters.plp_tag",
											"type": "Expression"
										}
									},
									"sink1": {
										"dsp_folder": {
											"value": "@pipeline().parameters.plp_tag",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"plp_tag": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-09T18:24:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_frist_ingest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_RestResource1",
								"type": "DatasetReference",
								"parameters": {
									"ds_tags": {
										"value": "@pipeline().parameters.plp_tag",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_Json1",
								"type": "DatasetReference",
								"parameters": {
									"dsp_folder": {
										"value": "@pipeline().parameters.plp_tag",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"plp_tag": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-09T18:24:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/ds_Json1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dsp_folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().dsp_folder",
							"type": "Expression"
						},
						"container": "landing"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dsp_folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().dsp_folder",
							"type": "Expression"
						},
						"container": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_tags": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('questions?order=desc&sort=activity&tagged=', dataset().ds_tags, '&site=stackoverflow')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Json1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Parquet1",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "ls_AzureBlobStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          has_more as boolean,",
						"          items as (accepted_answer_id as integer, answer_count as integer, closed_date as integer, closed_reason as string, content_license as string, creation_date as integer, is_answered as boolean, last_activity_date as integer, last_edit_date as integer, link as string, owner as (accept_rate as integer, account_id as integer, display_name as string, link as string, profile_image as string, reputation as integer, user_id as integer, user_type as string), question_id as integer, score as integer, tags as string[], title as string, view_count as integer)[],",
						"          quota_max as integer,",
						"          quota_remaining as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     dateFormats: ['MM/dd/yyyy'],",
						"     timestampFormats: ['MM/dd/yyyy'],",
						"     preferredIntegralType: 'integer',",
						"     preferredFractionalType: 'double') ~> source1",
						"source1 foldDown(unroll(items),",
						"     mapColumn(",
						"          accepted_answer_id = items.accepted_answer_id,",
						"          answer_count = items.answer_count,",
						"          closed_date = items.closed_date,",
						"          closed_reason = items.closed_reason,",
						"          content_license = items.content_license,",
						"          creation_date = items.creation_date,",
						"          is_answered = items.is_answered,",
						"          last_activity_date = items.last_activity_date,",
						"          last_edit_date = items.last_edit_date,",
						"          link = items.link,",
						"          owner = items.owner,",
						"          question_id = items.question_id,",
						"          score = items.score,",
						"          tags = items.tags,",
						"          title = items.title,",
						"          view_count = items.view_count",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'quarintine',",
						"     assertFailure_folderPath: 'api') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Json1')]",
				"[concat(variables('factoryId'), '/datasets/ds_Parquet1')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureBlobStorage1')]"
			]
		}
	]
}