{
	"name": "df_transformation_answer",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_Json_answer",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Parquet_answer",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "ls_AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          has_more as boolean,",
				"          items as (answer_id as integer, content_license as string, creation_date as integer, is_accepted as boolean, last_activity_date as integer, last_edit_date as integer, owner as (accept_rate as short, account_id as integer, display_name as string, link as string, profile_image as string, reputation as integer, user_id as integer, user_type as string), question_id as integer, score as short)[],",
				"          quota_max as short,",
				"          quota_remaining as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source1 foldDown(unroll(items),",
				"     mapColumn(",
				"          answer_id = items.answer_id,",
				"          content_license = items.content_license,",
				"          creation_date = items.creation_date,",
				"          is_accepted = items.is_accepted,",
				"          last_activity_date = items.last_activity_date,",
				"          last_edit_date = items.last_edit_date,",
				"          question_id = items.question_id,",
				"          score = items.score,",
				"          owner = items.owner,",
				"          quota_remaining,",
				"          quota_max",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 derive({owner.accept_rate} = owner.accept_rate,",
				"          {owner.account_id} = owner.account_id,",
				"          {owner.display_name} = owner.display_name,",
				"          {owner.link} = owner.link,",
				"          {owner.profile_image} = owner.profile_image,",
				"          {owner.reputation} = owner.reputation,",
				"          {owner.user_id} = owner.user_id,",
				"          {owner.user_type} = owner.user_type) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          answer_id,",
				"          content_license,",
				"          creation_date,",
				"          is_accepted,",
				"          last_activity_date,",
				"          last_edit_date,",
				"          question_id,",
				"          score,",
				"          quota_remaining,",
				"          quota_max,",
				"          accept_rate = {owner.accept_rate},",
				"          account_id = {owner.account_id},",
				"          display_name = {owner.display_name},",
				"          link = {owner.link},",
				"          profile_image = {owner.profile_image},",
				"          reputation = {owner.reputation},",
				"          user_id = {owner.user_id},",
				"          user_type = {owner.user_type}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'quarintine',",
				"     assertFailure_folderPath: 'api') ~> sink1"
			]
		}
	}
}