{
	"name": "df_integration_answer",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_Parquet_answer",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Parquet_silver_answer",
						"type": "DatasetReference"
					},
					"name": "sink1Owner"
				},
				{
					"dataset": {
						"referenceName": "ds_Parquet_silver_answer",
						"type": "DatasetReference"
					},
					"name": "sink2fact"
				}
			],
			"transformations": [
				{
					"name": "selectOwner"
				},
				{
					"name": "window1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "selectfact"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1",
				"source1 select(mapColumn(",
				"          account_id,",
				"          accept_rate,",
				"          display_name,",
				"          link,",
				"          profile_image,",
				"          reputation,",
				"          user_id,",
				"          user_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOwner",
				"selectOwner window(over(account_id),",
				"     asc(account_id, true),",
				"     row_number = rowNumber()) ~> window1",
				"window1 filter(row_number == 1) ~> filter1",
				"source1 select(mapColumn(",
				"          answer_id,",
				"          content_license,",
				"          creation_date,",
				"          is_accepted,",
				"          last_activity_date,",
				"          last_edit_date,",
				"          question_id,",
				"          score,",
				"          quota_max,",
				"          quota_remaining",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectfact",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('roundRobin', 2)) ~> sink1Owner",
				"selectfact sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('roundRobin', 2)) ~> sink2fact"
			]
		}
	}
}